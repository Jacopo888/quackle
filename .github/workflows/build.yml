# Continuous integration and pull request validation builds
name: CI builds
on:
  push:
    branches: [ master, actions_ci ]
  pull_request:
    branches: [ master, actions_ci ]

jobs:
  job:
    name: ${{ matrix.name }}-build
    runs-on: ${{ matrix.os }}
    env: ${{ matrix.env }}

    strategy:
      fail-fast: false
      matrix:
        name: [macos-latest-clang++, ubuntu-clang++-10.0, ubuntu-g++-7, ubuntu-g++-10, windows-latest-cl]
        include:
          - name: macos-latest-clang++
            os: macos-latest
            env:
              CXX: clang++
              CC: clang
          - name: ubuntu-clang++-10.0
            os: ubuntu-latest
            env:
              CXX: clang++-10.0
              CC: clang-10.0
          - name: ubuntu-g++-7
            os: ubuntu-latest
            env:
              CXX: g++-7
              CC: gcc-7
          - name: ubuntu-g++-10
            os: ubuntu-latest
            env:
              CXX: g++-10
              CC: gcc-10
          - name: windows-latest-cl
            os: windows-latest
            env:
              CXX: cl.exe
              CC: cl.exe
              VS160COMNTOOLS: C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools

    steps:
    - name: Check out sources
      uses: actions/checkout@v2

    - name: Get latest CMake and ninja
      uses: lukka/get-cmake@latest

    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v1
      with:
        path: ../Qt
        key: ${{ runner.os }}-QtCache

    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        version: '5.15.1'
        arch: 'win64_msvc2019_64'
        cached: ${{ steps.cache-qt.outputs.cache-hit }}

    # - name: Generate and build
    #   uses: lukka/run-cmake@v3
    #   # settings: https://github.com/lukka/run-cmake/blob/main/action.yml

    #   with:
    #     cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
    #     cmakeListsTxtPath: '${{ github.workspace }}/quacker/CMakeLists.txt'
    #     cmakeAppendedArgs: '-GNinja'
    #     buildWithCMakeArgs: '-- -v'
    #     buildDirectory: '${{ github.workspace }}/build/'

    - name: Generate and build
      run: |
        cmake -G Ninja
        ninja -v
      if: ${{ runner.os }} != "Windows"

    - name: Generate and build
      run: |
        C:\"Program Files (x86)"\"Microsoft Visual Studio"\2019\Enterprise\Common7\Tools\vsdevcmd.bat -arch=amd64 -host_arch=amd64
        cmake -G Ninja
        ninja -v
      shell: cmd
      if: ${{ runner.os }} == "Windows"

